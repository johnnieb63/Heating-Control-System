// This #include statement was automatically added by the Particle IDE.
//#include <Ubidots.h>



// This #include statement was automatically added by the Particle IDE.
//#include <Ubidots.h>



// Distributed with a free-will license.
// Use it any way you want, profit or free, provided it fits in the licenses of its associated works.
// MPL3115A2
// This code is designed to work with the MPL3115A2_I2CS I2C Mini Module available from ControlEverything.com.
// https://www.controleverything.com/content/Analog-Digital-Converters?sku=MPL3115A2_I2CS#tabs-0-product_tabset-2

#include <application.h>
#include <spark_wiring_i2c.h>

// MPL3115A2 I2C address is 0x60(96)
#define Addr 0x60








double cTemp = 0.0, fTemp = 0.0, pressure = 0.0, altitude = 0.0;
int temp = 0, tHeight = 0;
long pres = 0;
int x = 0;

//int getDarkSky = 0;
char responseString[64];
float responseValue = 0.0;
//float responseValue2;
//float h20;

int getTempPressure = 0;


void setup() 
{
    // Set variable
    
    
    
    //Particle.variable("i2cdevice", "MPL3115A2");
    //Particle.variable("rtxcTemp", cTemp);
    //Particle.variable("rtxPressure", pressure);
    //Particle.subscribe("reqOff", myHandler, MY_DEVICES); 
    
    
    
    //Particle.variable("altitude", altitude);
    //Particle.publish("Heatingwey", "null");
    //Particle.subscribe("hook-response/darksky", getTemp, MY_DEVICES);
    //Particle.subscribe("hook-response/windBearing", getWindDir, MY_DEVICES);

    // Initialise I2C communication
    Wire.begin();
    // Initialise Serial Communication, set baud rate = 9600
    //Serial.begin(9600);

    // Start I2C transmission
    Wire.beginTransmission(Addr);
    // Select control register
    Wire.write(0x26);
    // Active mode, OSR = 128, altimeter mode
    Wire.write(0xB9);
    // Stop I2C transmission
    Wire.endTransmission();

    // Start I2C transmission
    Wire.beginTransmission(Addr);
    // Select data configuration register
    Wire.write(0x13);
    // Data ready event enabled for altitude, pressure, temperature
    Wire.write(0x07);
    // Stop I2C transmission
    Wire.endTransmission();
    delay(3000);
}

void loop()
{
    unsigned int data[6];

    // Start I2C transmission
    Wire.beginTransmission(Addr);
    // Select control register
    Wire.write(0x26);
    // Active mode, OSR = 128, altimeter mode
    Wire.write(0xB9);
    // Stop I2C transmission
    Wire.endTransmission();
    delay(1000);

    // Start I2C transmission
    Wire.beginTransmission(Addr);
    // Select data register
    Wire.write(0x00);
    // Stop I2C transmission
    Wire.endTransmission();

    // Request 6 bytes of data
    Wire.requestFrom(Addr, 6);
    
    // Read 6 bytes of data from address 0x00(00)
    // status, tHeight msb1, tHeight msb, tHeight lsb, temp msb, temp lsb
    if(Wire.available() == 6)
    {
        data[0] = Wire.read();
        data[1] = Wire.read();
        data[2] = Wire.read();
        data[3] = Wire.read();
        data[4] = Wire.read();
        data[5] = Wire.read();
    }
   

    // Convert the data to 20-bits
    // tHeight = ((((long)data[1] * (long)65536) + (data[2] * 256) + (data[3] & 0xF0)) / 16);
    temp = ((data[4] * 256) + (data[5] & 0xF0)) / 16;
    // altitude = tHeight / 16.0;
    cTemp = (temp / 16.0);
    // fTemp = cTemp * 1.8 + 32;
    

    // Start I2C transmission
    Wire.beginTransmission(Addr);
    // Select control register
    Wire.write(0x26);
    // Active mode, OSR = 128, barometer mode
    Wire.write(0x39);
    // Stop I2C transmission
    Wire.endTransmission();
    
    // Start I2C transmission
    Wire.beginTransmission(Addr);
    // Select data register
    Wire.write(0x00);
    // Stop I2C transmission
    Wire.endTransmission();
    delay(1000);
    
    // Request 4 bytes of data
    Wire.requestFrom(Addr, 4);
    
    // Read 4 bytes of data
    // status, pres msb1, pres msb, pres lsb
    if(Wire.available() == 4)
    {
        data[0] = Wire.read();
        data[1] = Wire.read();
        data[2] = Wire.read();
        data[3] = Wire.read();
    }
   
    // Convert the data to 20-bits
    //pres = (((long)data[1] * (long)65536) + (data[2] * 256) + (data[3] & 0xF0)) / 16;  ....9-11-19 commented out 9-11-19
    //if ((pres > 300000) && (pres < 420000))
    //{
    //pressure = (pres / 4.0) / 100.0; ...................................................//..9-11-19 commented out 9-11-19
    //}

   /* 
  if (getDarkSky < millis())
      {
        // Get some data
        String data = String(10);
        // Trigger the integration
        Particle.publish("darkskyPressure", data,2, PRIVATE);
        delay(3000);
        //Particle.publish("windBearing", data, PRIVATE); ................................//..9-11-19 commented out 9-11-19
        // Wait 86.4 seconds
        getDarkSky = (millis() + 172800); // was 86400
      }
    */
  //delay(10000);
  
  if (getTempPressure < millis())
      {
        //Particle.publish("rtxpressure", String(pressure), 60, PRIVATE); ................//..9-11-19 commented out 9-11-19
        //delay(1000); ...................................................................//..9-11-19 commented out 9-11-19
        Particle.publish("h20Temp", String(cTemp,2), 60, PRIVATE);
        // Wait 30 seconds
        getTempPressure = (millis() + 20000);
      }
}


/*
void getTemp(const char *event, const char *data) {
  // store the response string globally
  // strncpy(responseString, data, sizeof(responseString)-1);

  // store a numeric value represented by the response data globally
  //T(°C) = (T(°F) - 32) × 5/9
  responseValue = atof(data);
  //lcd.print(0, 0, ((responseValue*10)/10));
  // responseValue = (data);
}


//void getWindDir(const char *event, const char *data) { ...............................//..9-11-19 commented out 9-11-19
  
 // responseValue2 = atof(data);  ......................................................//..9-11-19 commented out 9-11-19
//}




void myHandler(const char *event, const char *data)
{
  
if (strcmp(data,"off")==0)    
  {
    Particle.publish("boostOff", "off", 60, PRIVATE);
  }
  
}

*/
